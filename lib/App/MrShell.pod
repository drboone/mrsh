
=head1 NAME

App::MrShell - do everything the mrsh commandline tool can do and more

=head1 SYNOPSIS

    my $mrsh = App::MrShell
        -> new
        -> set_hosts('host1', 'host2', 'host3')
        -> queue_command('uptime')
        -> queue_command('mii-tool', 'eth0')
        -> queue_command('dmesg | head')
        -> run_queue;

=head1 DESCRIPTION

This package can do all the things L<mrsh> can do and possibly more.  The
methods mostly support chaining to make script writing easier and more
attractive.  The API hides the L<POE> nature of the project, but the author is
not opposed to exposing it if anybody wants such a thing.

=head1 OPTIONS METHODS

=over

=item B<set_shell_command_option>

The first argument is normally a space separated list of command-and-arguments
(with some basic quoting support).   If called with no arguments, a null-command
will be set indicating that there isn't a shell command to prepend hostnames
with -- the author can't imagine why this would be useful, but allows that it
could be someday for someone.

If the first argument is an arrayref, all following arguments will be ignored.
The arrayref will be copied as the shell command.  C<[]> can be used as the
arrayref to set a null-command.

=item B<set_group_option>

Setup groups of hosts.  Pairs are L<spliced|perlfunc/splice> off the stack with
first element as the name of a group, the second element as either a space
delimited set of hostnames or an arrayref of hostnames.  Example:

    $mrsh->set_group_option( group1 => [qw(host1 host2 host3)],
        group2=>['localhost'] );

=item B<set_logfile_option>

When provided, write a logfile of all lines received, where and when they were
executed.

=item B<set_debug_option>

Turn on various debugging messages.  The optional argument specifies the debug
level.  No argument, 0, and 1 are all equivalent.  While levels greater than one
indicate an increased amount of debugging noise.

=item B<set_no_command_escapes_option>

When expanding hosts in host-routing mode, slashes and spaces are escaped so
they function correctly when subshelled.  This disables that functionality.

=back

=head2 B<read_config>

The options above can be specified from a config file, which is documented in
the command line tool (see L<mrsh>).  The config file is read using
L<Config::Tiny>.

=head2 B<set_usage_error>

=head1 COMMAND METHODS

=head2 B<set_hosts>

Set the hosts, groups, and routed strings for the next
L<queue_command>.

=head2 B<queue_command>

Push a command into the stack for the given hosts (specified by
L<set_hosts>).

=head2 B<set_subst_vars>

Set any built in or extra subst vars.  These will only ever be set once per
L<subst_cmd_vars> call, so setting built-in keys will override the built-in
values.

=head2 B<subst_cmd_vars>

Substitute command vars, including the special magic of host routing and the
escaping associated with it.  So far there are only the two built-in subst vars:
C<%h> (hostname) and C<%n> (command number).

Others (that is non supported substs) can be added with the subst populator (see
L<set_subst_vars>).

=head2 B<start_queue_on_host>

=head1 FAQ

=head1 REPORTING BUGS

You can report bugs either via rt.cpan.org or via the issue tracking system on
github.  I'm likely to notice either fairly quickly.

=head1 AUTHOR

Paul Miller C<< <jettero@cpan.org> >>

=head1 COPYRIGHT

Copyright 2009 Paul Miller -- released under the GPL

=head1 SEE ALSO

perl(1), L<POE>, L<POE::Wheel::Run>, L<Term::ANSIColor>
